1. Heap Sort: Max / Min Heap
  - Runtime: O(n logn); Space: O(1) 
  - delete: swap the root with the leaf node -> reorder
  - heapify:
  '''
  void heapify(int arr[], int n, int i) {
    // Find largest among root, left child and right child
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
      largest = left;

    if (right < n && arr[right] > arr[largest])
      largest = right;

      // Swap and continue heapifying if root is not largest
      if (largest != i) {
        swap(&arr[i], &arr[largest]);
        heapify(arr, n, largest);
    }
  }
  '''

2. Merge Sort:
  - Runtime: O(n logn); Space: O(n)
  - break down into singleton & merge ordered version till an entity

3. Quick Sort: 
  - Runtime: O(n^2); Space: O(n)
  - partition() & pivot: larger than pivot V.S. smaller than pivot

4. Insertion Sort:
  - Runtime: O(n^2); Space: O(1)
  - swapping & comparing to numbers in the front

5. Bubble Sort:
  - Runtime: O(n^2); Space: O(1)
  - swapping & comparing to move from front to back, the 1st node to its position...

6. Selection Sort:
  - Runtime: O(n^2); Space: O(1)
  - select from smallest to largest and put in position